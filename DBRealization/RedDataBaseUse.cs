using System;
using System.Collections.Generic;
using System.Text;
using FirebirdSql.Data.FirebirdClient;
using System.IO;

namespace DBRealization
{
    public class RedDataBaseUse
    {
        public string ConnectionString { get; set; }
        public RedDataBaseUse(string _path)
        {
            int pageSize = 4096;
            bool forcedWrites = true;
            bool overwrite = true;
            var pth = Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, "..\\..\\..\\..\\"));
            var connectionString = new FbConnectionStringBuilder
            {
                Database = _path,
                ServerType = FbServerType.Embedded,
                UserID = "SYSDBA",
                Password = "masterkey",
                Role = "ADMIN",
                ClientLibrary = pth + "REDDB\\fbclient.dll"
            }.ToString();
            ConnectionString = connectionString;

            var direct = Path.GetDirectoryName(_path);
            if (!Directory.Exists(direct))
            {
                Directory.CreateDirectory(direct);
            }
            if (!System.IO.File.Exists(_path))
            {
                FbConnection.CreateDatabase(connectionString, pageSize, forcedWrites, overwrite);
                Init();
            }
        }

        public object DoCommand(string Query, Func<FbDataReader, object> Func)
        {
            using (FbConnection connection = new FbConnection(ConnectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    using (var command = new FbCommand(Query, connection, transaction))
                    {
                        if (Func == null)
                        {
                            command.ExecuteNonQuery();
                            return null;
                        }
                        else
                        {
                            using (var reader = command.ExecuteReader())
                            {
                                return Func.Invoke(reader);
                            }
                        }
                    }
                    transaction.Commit();
                }
            }
        }

        void Init()
        {
            DoCommand("create table reports_forms ( report_id integer not null, form_id integer not null)", null);

            DoCommand("create table reports ( report_id integer generated by default as identity primary key, masterform_id integer not null)", null);

            DoCommand("create table forms ( form_id integer generated by default as identity primary key, form_type varchar(255) not null)", null);

            DoCommand("create table data_rows ( form_id integer not null, row_id integer not null)", null);

            DoCommand("create table forms_10 (row_id integer generated by default as identity primary key, " + SQLFormConsts.Form10() + ")",null);

            // DoCommand("create table forms_11 (row_id integer generated by default as identity primary key, " + Form11.SQLCommandParams() + ")", null);
        }
    }
}
